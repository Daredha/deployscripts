server {
    listen 80;
    server_name localhost;

    # Add these buffering settings
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    proxy_read_timeout 300;
    proxy_connect_timeout 300;
    proxy_send_timeout 300;

    # Add error handling
    proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    proxy_next_upstream_tries 3;
    proxy_next_upstream_timeout 10s;

    # Add keepalive settings
    keepalive_timeout 300s;
    keepalive_requests 1000;
    client_body_timeout 300s;
    client_header_timeout 300s;
    send_timeout 300s;

    lua_need_request_body on;

    # Error handler location at server level
    location @error_handler {
        default_type application/json;
        return 502 '{"error": "Backend service unavailable"}';
    }

    location /sparql {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Proxy settings
        proxy_pass http://oxigraph:7878/query;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;

        # Error handling
        proxy_intercept_errors on;
        error_page 502 504 = @error_handler;

        # CORS configuration
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        rewrite_by_lua_block {
            local cjson = require("cjson")
            local body = ngx.req.get_body_data()
            
            if body then
                local success, json = pcall(cjson.decode, body)
                if success and json.query then
                    local query = json.query
                    ngx.log(ngx.ERR, "Original query: " .. query)
                    
                    -- Extract just the core pattern from inside the first SERVICE clause
                    local core_pattern = query:match("SERVICE%s*<[^>]+>%s*{([^{}]+)}")
                    if core_pattern then
                        -- Rebuild the query with just the core pattern
                        query = string.format("SELECT DISTINCT ?sub ?pred WHERE { %s } limit 500", core_pattern)
                    end
                    
                    -- Always send as application/sparql-query
                    ngx.log(ngx.ERR, "Final query: " .. query)
                    ngx.req.set_header("Content-Type", "application/sparql-query")
                    ngx.req.set_header("Accept", "application/sparql-results+json")
                    ngx.req.set_body_data(query)
                end
            end
        }

        header_filter_by_lua_block {
            ngx.header.content_type = "application/json"
        }
    }

    location /store {
        proxy_pass http://oxigraph:7878/store;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;
    }

    location ~ ^/(_search|_msearch|_count) {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Proxy settings for Elasticsearch
        proxy_pass http://elasticsearch:9200;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    }
}
