---
- hosts: all
  become: true
  vars:
    venv_path: /opt/venv

  tasks:
    - name: Install aptitude
      ansible.builtin.apt:
        name: aptitude
        state: latest
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Install required system packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - git
          - certbot
          - python3-certbot-nginx
        state: latest
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Add OpenResty repository signing key
      ansible.builtin.apt_key:
        url: https://openresty.org/package/pubkey.gpg
        state: present

    - name: Add OpenResty repository
      ansible.builtin.apt_repository:
        repo: deb http://openresty.org/package/ubuntu focal main
        state: present
        filename: openresty

    - name: Install OpenResty
      ansible.builtin.apt:
        name: openresty
        state: present
        update_cache: yes

    - name: Create nginx configuration directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - /etc/nginx/conf.d

    - name: Copy Lua transform script
      ansible.builtin.copy:
        src: site/nginx/conf.d/transform.lua
        dest: /etc/nginx/conf.d/transform.lua
        mode: '0644'

    - name: Install system build dependencies
      apt:
        name:
          - python3-dev
          - libyaml-dev
          - gcc
          - docker-compose
        state: present
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Start Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Wait for Docker to start
      command: docker ps
      register: docker_check
      until: docker_check.rc == 0
      retries: 10
      delay: 3
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Install python3-venv
      apt:
        name: python3-venv
        state: present
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Create virtual environment
      command: python3 -m venv {{ venv_path }}
      args:
        creates: "{{ venv_path }}"
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Install basic dependencies directly
      command: "{{ venv_path }}/bin/pip3 install --upgrade pip setuptools wheel packaging"
      args:
        creates: "{{ venv_path }}/lib/python3*/site-packages/packaging"
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Remove existing Docker SDK packages
      pip:
        name:
          - docker-py
          - docker
          - docker-compose
        state: absent
        virtualenv: "{{ venv_path }}"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: Install Docker, Elasticsearch and rdflib Module for Python
      pip:
        name:
          - "docker>=6.1.3"
          - elasticsearch
          - rdflib
          - "docker-compose==1.29.2"
          - "PyYAML<6.0,>=3.10"
        virtualenv: "{{ venv_path }}"
        extra_args: "--no-build-isolation"
        state: present
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: Install deployscripts
      git:
        repo: https://github.com/Daredha/deployscripts.git
        dest: /opt/deployscripts
        version: main
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: Deploy elastic server
      command:
        cmd: docker compose -f /opt/deployscripts/site/elastic/docker-compose.yml up -d --build
        chdir: /opt/deployscripts/site/elastic
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: Deploy oxigraph server
      command:
        cmd: docker compose -f /opt/deployscripts/site/oxigraph/docker-compose.yml up -d
        chdir: /opt/deployscripts/site/oxigraph
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"
    
    - name: Load data into oxigraph
      command: >-
        curl -X POST "http://localhost:7878/store?default" 
        -H "Content-Type: text/turtle" 
        --data-binary "@/opt/deployscripts/site/data/ld/artwork_linked_art.ttl"
    
    - name: Test oxigraph
      uri:
        url: http://localhost:7878/query
        method: POST
        body: 'SELECT * WHERE { ?s ?p ?o } LIMIT 10'
        body_format: json
        headers:
          Accept: 'application/sparql-results+json'
          Content-Type: 'application/sparql-query'
        status_code: 200
      register: oxigraph_test
    
    - name: Give Elastic Search some time to start
      pause:
        seconds: 15

    - name: Test elasticsearch
      uri:
        url: http://localhost:9200
        method: GET
        status_code: 200
      register: elasticsearch_test

    - name: Load data into elasticsearch
      command: "{{ venv_path }}/bin/python3 /opt/deployscripts/site/elastic/populate_elastic.py"
      environment:
        PYTHONPATH: "{{ venv_path }}/lib/python3.12/site-packages"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"    
      
    - debug:
        msg: "Oxigraph test: {{ oxigraph_test.status }}"

    - debug:
        msg: "Elasticsearch test: {{ elasticsearch_test.status }}"

    - name: Copy Valeros web application files
      copy:
        src: /opt/deployscripts/site/valeros/browser/
        dest: /var/www/valeros
        mode: '0755'
        owner: www-data
        group: www-data

    - name: Ensure proper permissions on /var/www/valeros
      file:
        path: /var/www/valeros
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Create SSL certificate directory
      file:
        path: /etc/letsencrypt/live/valeros
        state: directory
        mode: '0755'

    - name: Generate self-signed SSL certificate
      command: >
        openssl req -x509 -nodes -days 365 -newkey rsa:2048
        -keyout /etc/letsencrypt/live/valeros/privkey.pem
        -out /etc/letsencrypt/live/valeros/fullchain.pem
        -subj "/C=US/ST=State/L=City/O=Organization/CN=valeros"
      args:
        creates: /etc/letsencrypt/live/valeros/fullchain.pem

    - name: Configure Nginx
      copy:
        dest: /etc/nginx/sites-available/valeros
        content: |
          # Lua settings
          lua_package_path "/etc/nginx/conf.d/?.lua;;";
          lua_need_request_body on;

          server {
              listen 443 ssl;
              server_name valeros;
              root /var/www/valeros;
              index index.html;

              ssl_certificate /etc/letsencrypt/live/valeros/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/valeros/privkey.pem;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;
              
              location / {
                  try_files $uri $uri/ /index.html;
              }
              location ~ ^/(_search|_msearch|_count) {
                  if ($request_method = 'OPTIONS') {
                      add_header 'Access-Control-Allow-Origin' '*';
                      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept';
                      add_header 'Access-Control-Max-Age' 1728000;
                      add_header 'Content-Type' 'text/plain; charset=utf-8';
                      add_header 'Content-Length' 0;
                      return 204;
                  }

                  # Proxy settings for Elasticsearch
                  proxy_pass http://localhost:9200;
                  proxy_http_version 1.1;
                  proxy_set_header Connection "";
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;

                  # CORS headers
                  add_header 'Access-Control-Allow-Origin' '*' always;
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept' always;
                  add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
              }

              location /sparql {
                  access_by_lua_file /etc/nginx/conf.d/transform.lua;

                  if ($request_method = 'OPTIONS') {
                      add_header 'Access-Control-Allow-Origin' '*';
                      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept';
                      add_header 'Access-Control-Max-Age' 1728000;
                      add_header 'Content-Type' 'text/plain; charset=utf-8';
                      add_header 'Content-Length' 0;
                      return 204;
                  }

                  # Proxy settings for Oxigraph
                  proxy_pass http://localhost:7878/query;
                  proxy_http_version 1.1;
                  proxy_set_header Connection "";
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;

                  # CORS headers
                  add_header 'Access-Control-Allow-Origin' '*' always;
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept' always;
                  add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
              }
          }

          # Redirect HTTP to HTTPS
          server {
              listen 80;
              server_name valeros;
              return 301 https://$host$request_uri;
          }
        mode: '0644'

    - name: Enable Nginx site for Valeros
      file:
        src: /etc/nginx/sites-available/valeros
        dest: /etc/nginx/sites-enabled/valeros
        state: link

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

    - name: Test Valeros web application
      uri:
        url: https://localhost
        method: GET
        status_code: 200
        validate_certs: no
      register: valeros_test

    - debug:
        msg: "Valeros test: {{ valeros_test.status }}"

    # Cleanup tasks
    - name: Remove deployscripts folder
      ansible.builtin.file:
        path: /opt/deployscripts
        state: absent

    - name: Find tar.gz files in /opt
      ansible.builtin.find:
        paths: /opt
        patterns: "*.tar.gz"
      register: tarfiles

    - name: Remove tar.gz files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ tarfiles.files }}"