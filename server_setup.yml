---
- hosts: all
  become: true
  vars:
    venv_path: /opt/venv

  tasks:
    - name: (System) Install aptitude
      ansible.builtin.apt:
        name: aptitude
        state: latest
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: (System) Install required system packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - git
          - certbot
          - python3-certbot-nginx
          - ufw
        state: latest
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: (OpenResty) Add OpenResty repository signing key
      ansible.builtin.apt_key:
        url: https://openresty.org/package/pubkey.gpg
        state: present

    - name: (OpenResty) Add OpenResty repository
      ansible.builtin.apt_repository:
        repo: deb http://openresty.org/package/ubuntu focal main
        state: present
        filename: openresty

    - name: (OpenResty) Stop nginx service if running
      systemd:
        name: nginx
        state: stopped
        enabled: no
      ignore_errors: yes

    - name: (OpenResty) Install OpenResty
      ansible.builtin.apt:
        name: openresty
        state: present
        update_cache: yes

    - name: (OpenResty) Create custom systemd service file for OpenResty
      copy:
        dest: /etc/systemd/system/openresty.service
        content: |
          [Unit]
          Description=The OpenResty Application Platform
          After=syslog.target network-online.target remote-fs.target nss-lookup.target
          Wants=network-online.target

          [Service]
          Type=forking
          PIDFile=/run/openresty.pid
          ExecStartPre=/usr/local/openresty/nginx/sbin/nginx -t -q -g 'daemon on; master_process on;'
          ExecStart=/usr/local/openresty/nginx/sbin/nginx -g 'daemon on; master_process on;'
          ExecReload=/usr/local/openresty/nginx/sbin/nginx -g 'daemon on; master_process on;' -s reload
          ExecStop=/bin/kill -s QUIT $MAINPID
          TimeoutStartSec=120
          TimeoutStopSec=30
          Restart=on-failure
          RestartSec=2

          [Install]
          WantedBy=multi-user.target

    - name: (OpenResty) Remove default OpenResty configurations
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /usr/local/openresty/nginx/conf/conf.d/default.conf
        - /etc/nginx/conf.d/default.conf
        - /etc/nginx/sites-enabled/default
      ignore_errors: yes

    - name: (OpenResty) Remove default nginx configuration
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /etc/nginx/sites-enabled/default
        - /etc/nginx/sites-available/default
        - /etc/nginx/conf.d/default.conf

    - name: (Valeros) Remove existing valeros site if present
      file:
        path: /etc/nginx/sites-enabled/valeros
        state: absent

    - name: (OpenResty) Create OpenResty configuration
      copy:
        dest: /usr/local/openresty/nginx/conf/nginx.conf
        content: |
          worker_processes auto;
          error_log /var/log/openresty/error.log;
          pid /run/openresty.pid;

          events {
              worker_connections 1024;
          }

          http {
              types {
                  text/html                             html htm shtml;
                  text/css                              css;
                  text/xml                              xml;
                  image/gif                             gif;
                  image/jpeg                            jpeg jpg;
                  application/javascript                js;
                  application/atom+xml                  atom;
                  application/rss+xml                   rss;
                  text/plain                            txt;
                  image/png                             png;
                  application/pdf                       pdf;
                  application/x-tar                     tar;
                  application/zip                       zip;
              }
              default_type application/octet-stream;
              sendfile on;
              keepalive_timeout 65;

              # Lua settings
              lua_package_path "/etc/nginx/conf.d/?.lua;;";
              lua_need_request_body on;

              # Include site configurations
              include /etc/nginx/sites-enabled/*;
          }

    - name: (OpenResty) Create OpenResty log directory
      file:
        path: /var/log/openresty
        state: directory
        mode: '0755'
        owner: www-data
        group: www-data

    - name: (OpenResty) Create error.log if it doesn't exist
      file:
        path: /var/log/openresty/error.log
        state: touch
        mode: '0644'
        owner: www-data
        group: www-data

    - name: (OpenResty) Create required nginx directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - /etc/nginx/sites-enabled
        - /etc/nginx/sites-available
        - /etc/nginx/conf.d
        - /var/log/nginx

    - name: (OpenResty) Create SSL directory
      file:
        path: /etc/nginx/ssl
        state: directory
        mode: '0755'

    - name: (OpenResty) Generate self-signed SSL certificate
      command: >
        openssl req -x509 -nodes -days 365 -newkey rsa:2048
        -keyout /etc/nginx/ssl/nginx.key
        -out /etc/nginx/ssl/nginx.crt
        -subj "/CN=localhost"
        -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"
      args:
        creates: /etc/nginx/ssl/nginx.crt

    - name: (OpenResty) Create CORS configuration
      copy:
        dest: /etc/nginx/conf.d/cors.conf
        content: |
          add_header 'Access-Control-Allow-Origin' '*' always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
          add_header 'Access-Control-Allow-Headers' '*' always;
          add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    - name: (OpenResty) Configure Nginx with SSL
      copy:
        dest: /etc/nginx/sites-available/valeros
        content: |
          map $request_method $cors_method {
              OPTIONS 204;
              default $request_method;
          }

          server {
              listen 80;
              listen [::]:80;
              server_name _;
              return 301 https://$host$request_uri;
          }

          server {
              listen 443 ssl;
              listen [::]:443 ssl;
              server_name _;

              ssl_certificate /etc/nginx/ssl/nginx.crt;
              ssl_certificate_key /etc/nginx/ssl/nginx.key;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;

              root /var/www/valeros;
              index index.html;

              # Internal location for Oxigraph
              location /query {
                  internal;
                  proxy_pass http://localhost:7878/query;
                  proxy_http_version 1.1;
                  proxy_set_header Connection "";
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # API endpoints first
              location /sparql {
                  include /etc/nginx/conf.d/cors.conf;

                  if ($request_method = 'OPTIONS') {
                      add_header 'Access-Control-Max-Age' 1728000;
                      add_header 'Content-Type' 'text/plain charset=UTF-8';
                      add_header 'Content-Length' 0;
                      return 204;
                  }

                  access_by_lua_file /etc/nginx/conf.d/transform.lua;

                  # Handle errors
                  proxy_intercept_errors on;
                  error_page 405 = @405_json;
              }

              location @405_json {
                  default_type application/json;
                  return 405 '{"error": "Method not allowed"}';
              }

              location /_search {
                  include /etc/nginx/conf.d/cors.conf;

                  if ($request_method = 'OPTIONS') {
                      add_header 'Access-Control-Max-Age' 1728000;
                      add_header 'Content-Type' 'text/plain charset=UTF-8';
                      add_header 'Content-Length' 0;
                      return 204;
                  }

                  proxy_pass http://localhost:9200;
                  proxy_http_version 1.1;
                  proxy_set_header Connection "";
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # Static files and SPA fallback last
              location / {
                  try_files $uri $uri/ /index.html;
                  include /etc/nginx/conf.d/cors.conf;
                  add_header X-Debug-Path $request_filename always;
                  add_header X-Debug-Uri $uri always;
                  add_header X-Debug-Document-Root $document_root always;

                  if ($request_method = 'OPTIONS') {
                      add_header 'Access-Control-Max-Age' 1728000;
                      add_header 'Content-Type' 'text/plain charset=UTF-8';
                      add_header 'Content-Length' 0;
                      return 204;
                  }
              }
          }

    - name: (OpenResty) Enable valeros site
      file:
        src: /etc/nginx/sites-available/valeros
        dest: /etc/nginx/sites-enabled/valeros
        state: link

    - name: (OpenResty) Create default site configuration
      copy:
        dest: /etc/nginx/sites-available/default
        content: |
          server {
              listen 80 default_server;
              server_name _;
              return 404;
          }

    - name: (Firewall) Allow HTTP through firewall
      ufw:
        rule: allow
        port: '80'
        proto: tcp

    - name: (Firewall) Allow HTTPS through firewall
      ufw:
        rule: allow
        port: '443'
        proto: tcp

    - name: (OpenResty) Create mime.types file
      copy:
        dest: /usr/local/openresty/nginx/conf/mime.types
        content: |
          types {
              text/html                             html htm shtml;
              text/css                              css;
              text/xml                              xml;
              image/gif                             gif;
              image/jpeg                            jpeg jpg;
              application/javascript                js;
              application/atom+xml                  atom;
              application/rss+xml                   rss;
              text/plain                            txt;
              image/png                             png;
              application/pdf                       pdf;
              application/x-tar                     tar;
              application/zip                       zip;
          }

    - name: (OpenResty) Create nginx configuration directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - /etc/nginx/conf.d

    - name: (OpenResty) Copy Lua transform script
      ansible.builtin.copy:
        src: site/nginx/conf.d/transform.lua
        dest: /etc/nginx/conf.d/transform.lua
        mode: '0644'

    - name: (System) Install system build dependencies
      apt:
        name:
          - python3-dev
          - libyaml-dev
          - gcc
          - docker-compose
        state: present
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: (Docker) Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: (Docker) Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: (Docker) Update apt and install docker-ce
      ansible.builtin.apt:
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: (Docker) Start Docker service
      command: systemctl start docker
      become: yes

    - name: (Docker) Wait for Docker socket
      wait_for:
        path: /var/run/docker.sock
        timeout: 30

    - name: (Docker) Verify Docker is running
      command: docker ps
      register: docker_test
      until: docker_test.rc == 0
      retries: 5
      delay: 5

    - name: (Docker) Install python3-venv
      apt:
        name: python3-venv
        state: present
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: (System) Create virtual environment
      command: python3 -m venv {{ venv_path }}
      args:
        creates: "{{ venv_path }}"
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: (System) Install basic dependencies directly
      command: "{{ venv_path }}/bin/pip3 install --upgrade pip setuptools wheel packaging"
      args:
        creates: "{{ venv_path }}/lib/python3*/site-packages/packaging"
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: (Docker) Remove existing Docker SDK packages
      pip:
        name:
          - docker-py
          - docker
          - docker-compose
        state: absent
        virtualenv: "{{ venv_path }}"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: (System)Install Docker, Elasticsearch and rdflib Module for Python
      pip:
        name:
          - "docker>=6.1.3"
          - elasticsearch
          - rdflib
          - "docker-compose==1.29.2"
          - "PyYAML<6.0,>=3.10"
        virtualenv: "{{ venv_path }}"
        extra_args: "--no-build-isolation"
        state: present
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: (Source code) Install deployscripts
      git:
        repo: https://github.com/Daredha/deployscripts.git
        dest: /opt/deployscripts
        version: main
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: (Elastic) Deploy elastic server
      command:
        cmd: docker compose -f /opt/deployscripts/site/elastic/docker-compose.yml up -d --build
        chdir: /opt/deployscripts/site/elastic
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: (Oxigraph) Deploy oxigraph server
      command:
        cmd: docker compose -f /opt/deployscripts/site/oxigraph/docker-compose.yml up -d
        chdir: /opt/deployscripts/site/oxigraph
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: (Oxigraph) Wait for oxigraph to be ready
      uri:
        url: http://localhost:7878/query
        method: GET
        status_code: [200, 404]  # 404 is acceptable as it means server is up but no data
      register: result
      until: result.status != -1
      retries: 30
      delay: 2

    - name: (Oxigraph) Load data into oxigraph
      command: >-
        curl -X POST "http://localhost:7878/store?default" 
        -H "Content-Type: text/turtle" 
        --data-binary "@/opt/deployscripts/site/data/ld/artwork_linked_art.ttl"
      register: load_result
      retries: 3
      delay: 5
      until: load_result.rc == 0
    
    - name: (Oxigraph) Test oxigraph
      uri:
        url: http://localhost:7878/query
        method: POST
        body: 'SELECT * WHERE { ?s ?p ?o } LIMIT 10'
        body_format: json
        headers:
          Accept: 'application/sparql-results+json'
          Content-Type: 'application/sparql-query'
        status_code: 200
        validate_certs: no
      register: oxigraph_test

    - debug:
        msg: "Oxigraph test: {{ oxigraph_test.status }}"

    - name: (Elastic) Wait for Elasticsearch to be ready
      uri:
        url: http://localhost:9200/_cluster/health
        method: GET
        status_code: 200
        validate_certs: no
      register: elastic_health
      until: elastic_health.status == 200
      retries: 60
      delay: 5

    - name: (Elastic) Test Elasticsearch
      uri:
        url: http://localhost:9200/_cat/health
        method: GET
        status_code: 200
        validate_certs: no
      register: elasticsearch_test

    - debug:
        msg: "Elasticsearch test: {{ elasticsearch_test.status }}"

    - name: (Elastic) Load data into elasticsearch
      command: "{{ venv_path }}/bin/python3 /opt/deployscripts/site/elastic/populate_elastic.py"
      environment:
        PYTHONPATH: "{{ venv_path }}/lib/python3.12/site-packages"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"
    
    - name: (Valeros) Check if source directory exists
      stat:
        path: "{{ playbook_dir }}/site/valeros/browser"
      register: source_dir

    - debug:
        msg: "Source directory exists: {{ source_dir.stat.exists }}, Path: {{ playbook_dir }}/site/valeros/browser"

    - name: (Valeros) Copy Valeros web application files
      copy:
        src: "{{ playbook_dir }}/site/valeros/browser/"
        dest: /var/www/valeros
        mode: '0755'
        owner: www-data
        group: www-data
      when: source_dir.stat.exists

    - name: (Valeros) Ensure proper permissions on /var/www/valeros
      file:
        path: /var/www/valeros
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
        mode: '0755'

    - name: (OpenResty) Test nginx configuration
      command: /usr/local/openresty/nginx/sbin/nginx -t
      register: nginx_test
      changed_when: false

    - name: (OpenResty) Start OpenResty service
      systemd:
        name: openresty
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: (OpenResty) Wait for OpenResty to be ready
      wait_for:
        port: 80
        timeout: 30
        state: started

    - name: (Valeros) Test Valeros web application
      uri:
        url: https://localhost
        method: GET
        status_code: 200
        validate_certs: no
      register: valeros_test

    - debug:
        msg: "Valeros test: {{ valeros_test.status }}"

    # Cleanup tasks
    - name: (System) Remove deployscripts folder
      ansible.builtin.file:
        path: /opt/deployscripts
        state: absent

    - name: (System) Find tar.gz files in /opt
      ansible.builtin.find:
        paths: /opt
        patterns: "*.tar.gz"
      register: tarfiles

    - name: (System) Remove tar.gz files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ tarfiles.files }}"