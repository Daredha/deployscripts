---
- hosts: all
  become: true
  vars:
    venv_path: /opt/venv

  tasks:
    - name: Install aptitude
      ansible.builtin.apt:
        name: aptitude
        state: latest
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Install required system packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - nginx
          - git
        state: latest
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Install system build dependencies
      apt:
        name:
          - python3-dev
          - libyaml-dev
          - gcc
          - docker-compose
        state: present
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Wait for Docker to start
      command: docker ps
      register: docker_check
      until: docker_check.rc == 0
      retries: 10
      delay: 3
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Install python3-venv
      apt:
        name: python3-venv
        state: present
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Create virtual environment
      command: python3 -m venv {{ venv_path }}
      args:
        creates: "{{ venv_path }}"
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Install basic dependencies directly
      command: "{{ venv_path }}/bin/pip3 install --upgrade pip setuptools wheel packaging"
      args:
        creates: "{{ venv_path }}/lib/python3*/site-packages/packaging"
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: Remove existing Docker SDK packages
      pip:
        name:
          - docker-py
          - docker
          - docker-compose
        state: absent
        virtualenv: "{{ venv_path }}"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: Install Docker, Elasticsearch and rdflib Module for Python
      pip:
        name:
          - "docker>=6.1.3"
          - elasticsearch
          - rdflib
          - "docker-compose==1.29.2"
          - "PyYAML<6.0,>=3.10"
        virtualenv: "{{ venv_path }}"
        extra_args: "--no-build-isolation"
        state: present
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: Install deployscripts
      git:
        repo: https://github.com/Daredha/deployscripts.git
        dest: /opt/deployscripts
        version: main
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: Deploy virtuoso server
      command:
        cmd: docker compose -f /opt/deployscripts/site/virtuoso/docker-compose.yml up -d --build
        chdir: /opt/deployscripts/site/virtuoso
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: Deploy elastic server
      command:
        cmd: docker compose -f /opt/deployscripts/site/elastic/docker-compose.yml up -d --build
        chdir: /opt/deployscripts/site/elastic
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: Wait for Elastic to boot (30 seconds)
      pause:
        seconds: 30

    - name: Run populate_elastic.py
      command: "{{ venv_path }}/bin/python3 /opt/deployscripts/site/elastic/populate_elastic.py"
      environment:
        PYTHONPATH: "{{ venv_path }}/lib/python3.12/site-packages"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python3"

    - name: Test virtuoso
      uri:
        url: http://localhost:8890/sparql
        method: GET
        status_code: 200
      register: virtuoso_test

    - name: Test elasticsearch
      uri:
        url: http://localhost:9200
        method: GET
        status_code: 200
      register: elasticsearch_test
      
    - debug:
        msg: "Virtuoso test: {{ virtuoso_test.status }}"

    - debug:
        msg: "Elasticsearch test: {{ elasticsearch_test.status }}"